{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","_refs","_getRefs","_targetDate","_remainingТime","root","refs","clockFace","document","querySelector","d","h","m","s","setInterval","_updateTimer","bind","msEnd","Date","parse","now","_updateClockface","_getTimeComponents","_deltaTime","time","days","_pad","Math","floor","hours","mins","secs","value","String","padStart","textContent","timer1","console","log"],"mappings":";;;AAkJA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/IA,QAAA,gBAEMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAa,EAAA,KAAA,GAE3BC,KAAAA,MAAQ,KAAKC,SAASH,GACtBI,KAAAA,YAAcH,EAEdI,KAAAA,iBAuIb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WApIaC,MAAAA,SAAAA,GACCC,IAAAA,EAAO,GASNA,OAPPA,EAAKC,UAAYC,SAASC,cAAiBJ,GAAAA,OAAAA,IAE3CC,EAAKI,EAAIF,SAASC,cAAiBJ,GAAAA,OAAAA,EAAnC,6BACAC,EAAKK,EAAIH,SAASC,cAAiBJ,GAAAA,OAAAA,EAAnC,8BACAC,EAAKM,EAAIJ,SAASC,cAAiBJ,GAAAA,OAAAA,EAAnC,6BACAC,EAAKO,EAAIL,SAASC,cAAiBJ,GAAAA,OAAAA,EAAnC,6BAEOC,IA0Hf,CAAA,IAAA,iBAvHsB,MAAA,WACdQ,YAAY,KAAKC,aAAaC,KAAK,MAAO,OAsHlD,CAAA,IAAA,aAnHiB,MAAA,WAKFC,OAHOC,KAAKC,MAAO,KAAKhB,aACjBe,KAAKE,QAgH3B,CAAA,IAAA,eA3GmB,MAAA,WAEVC,KAAAA,iBAAiB,KAAKC,mBAAmB,KAAKC,cAAe,KAAKtB,SAyG3E,CAAA,IAAA,qBAnGoBuB,MAAAA,SAAAA,GASb,MAAA,CAAEC,KALQ,KAAKC,KAAKC,KAAKC,MAAMJ,EAAQ,QAK/BK,MAJG,KAAKH,KAAKC,KAAKC,MAAOJ,EAAQ,MAAyB,OAInDM,KAHL,KAAKJ,KAAKC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGvCO,KAFf,KAAKL,KAAKC,KAAKC,MAAOJ,EAAQ,IAAc,SA4FzD,CAAA,IAAA,OAnFKQ,MAAAA,SAAAA,GACMC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAkFrC,CAAA,IAAA,mBA/E8D,MAAA,SAAA,EAAA,GAA3CT,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAAUrB,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAErDH,EAAEyB,YAAgBV,GAAAA,OAAAA,GAClBd,EAAEwB,YAAiBN,GAAAA,OAAAA,GACnBjB,EAAEuB,YAAiBL,GAAAA,OAAAA,GACnBjB,EAAEsB,YAAiBJ,GAAAA,OAAAA,OA0EvB,EA7IMjC,GAyEAsC,EAAS,IAAItC,EAAe,CAChCC,SAAU,WACVC,WAAY,IAAIkB,KAAK,kBAGvBmB,QAAQC,IAAIF","file":"src.5566af63.js","sourceRoot":"..\\src","sourcesContent":["\r\n//import Tmpl from \"./templates/example.hbs\";\r\n//import cards from './example.json';\r\nimport './styles.css';\r\n\r\nclass CountdownTimer{\r\n    constructor({selector, targetDate}) {\r\n\r\n        this._refs = this._getRefs(selector);\r\n        this._targetDate = targetDate;\r\n\r\n        this._remainingТime();\r\n    }\r\n\r\n    _getRefs(root) {\r\n        const refs = {};\r\n\r\n        refs.clockFace = document.querySelector(`${root}`);\r\n\r\n        refs.d = document.querySelector(`${root} span[data-value=\"days\"]`);\r\n        refs.h = document.querySelector(`${root} span[data-value=\"hours\"]`);\r\n        refs.m = document.querySelector(`${root} span[data-value=\"mins\"]`);\r\n        refs.s = document.querySelector(`${root} span[data-value=\"secs\"]`);\r\n\r\n        return refs;\r\n    }\r\n\r\n    _remainingТime () {\r\n        setInterval(this._updateTimer.bind(this), 1000);   \r\n    };\r\n\r\n    _deltaTime() {\r\n\r\n        const msEnd = Date.parse( this._targetDate );\r\n        const msNow = Date.now();\r\n\r\n        return msEnd - msNow;\r\n    };\r\n    \r\n    _updateTimer() {\r\n      \r\n    this._updateClockface(this._getTimeComponents(this._deltaTime()), this._refs);\r\n    }\r\n        \r\n    \r\n\r\n\r\n _getTimeComponents(time) {\r\n \r\n\r\n\r\n    const days = this._pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this._pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = this._pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\nconst secs = this._pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\nreturn { days, hours, mins, secs };\r\n}\r\n\r\n\r\n/*\r\n   * Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\r\n   */\r\n_pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n\r\n_updateClockface({ days, hours, mins, secs }, { d, h, m, s }) {\r\n\r\n    d.textContent =`${days}`;\r\n    h.textContent = `${hours}`;\r\n    m.textContent = `${mins}`;\r\n    s.textContent = `${secs}`;\r\n    }\r\n\r\n    \r\n}\r\n\r\nconst timer1 = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Dec 17, 2021'),\r\n});\r\n\r\nconsole.log(timer1);\r\n\r\n\r\n\r\n/*let time;\r\nconst END = 'Nov 14, 2020';\r\n\r\nconst refs = {\r\nd: document.querySelector('span[data-value=\"days\"'),\r\nh: document.querySelector('span[data-value=\"hours\"'),\r\nm: document.querySelector('span[data-value=\"mins\"'),\r\ns: document.querySelector('span[data-value=\"secs\"'),\r\nclockFace: document.querySelector('#timer-1'),\r\n}\r\n\r\nfunction remainingТime() {\r\n\r\nsetInterval(updateTimer, 1000);\r\n}\r\n\r\n\r\nfunction updateTimer() {\r\n\r\ndeltaTime();\r\n//const { days, hours, mins, secs } = getTimeComponents(time);\r\n//console.log(`Дни ${days} часы ${hours} минуты ${mins} секунды ${secs}`);\r\n\r\nupdateClockface(getTimeComponents(time));\r\n\r\n}\r\n\r\n\r\n\r\nfunction deltaTime() {\r\n\r\nconst msEnd = Date.parse( END );\r\nconst msNow = Date.now();\r\n\r\nreturn time = msEnd - msNow;\r\n}\r\n\r\nfunction getTimeComponents(time) {\r\n\r\nconst days = Math.floor(time / (1000 * 60 * 60 * 24));\r\nconst hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\nconst mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\nconst secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\nreturn { days, hours, mins, secs };\r\n}\r\n\r\nfunction updateClockface({ days, hours, mins, secs }) {\r\n\r\nrefs.d.textContent =`${days}`;\r\nrefs.h.textContent = `${hours}`;\r\nrefs.m.textContent = `${mins}`;\r\nrefs.s.textContent = `${secs}`;\r\n}\r\n\r\n\r\n\r\nremainingТime();\r\n\r\n*/"]}